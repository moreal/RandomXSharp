name: Build

on:
  push:
  pull_request:
  schedule:
  - cron: '0 15 * * *'  # Every night KST (UTC +9)

env:
  RANDOMX_VERSION: v1.1.9

jobs:
  build:
    env:
      XUNIT_VERSION: "2.4.1"
    strategy:
      matrix:
        # CHECK: When you change the below list, you need to change
        # the "download-artifact" steps in the "pack" job.
        os: [macos-10.15, ubuntu-20.04, windows-2019]
        framework: [net6.0, net472]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - if: startsWith(github.ref, 'refs/tags/')
      shell: pwsh
      run: |
        $proj = "./RandomXSharp/RandomXSharp.csproj"
        $xpath = '/Project/PropertyGroup/VersionPrefix/text()'
        $projVer = (Select-Xml -Path "$proj" -XPath $xpath).Node.Value
        echo "VersionPrefix: $projVer"
        $tagVer = $env:GITHUB_REF.Substring(10)
        echo "tag: $tagVer"
        exit ($tagVer -eq $projVer ? 0 : 1)
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'
    - uses: actions/cache@v2
      with:
        path: native
        key: ${{ runner.os }}-${{ env.RANDOMX_VERSION }}
    - if: runner.os == 'Linux'
      run: |
        docker build --build-arg BUILD_NATIVE_ONLY=true -t librandomx .
        docker cp \
          "$(docker create librandomx):/usr/local/src/RandomXSharp/native/librandomx.so" \
          native/
    - if: runner.os == 'macOS'
      run: ./build-librandomx.sh "$RANDOMX_VERSION"
    - if: runner.os == 'Windows'
      run: ./Build-RandomX.ps1 -RandomXVersion "${env:RANDOMX_VERSION}"
    - if: startsWith(matrix.framework, 'net4')
      run: nuget install xunit.runner.console -version ${{ env.XUNIT_VERSION }}
    - uses: actions/cache@v2
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-${{ matrix.framework }}-nuget
        restore-keys: ${{ runner.os }}-${{ matrix.framework }}-nuget
    - run: dotnet restore
    - run: dotnet build --no-restore
    - if: startsWith(matrix.framework, 'netcoreapp')
      run: dotnet test --no-restore --no-build -r /tmp/TestResults/ -v n --blame -f ${{ matrix.framework }}
    - if: always() && startsWith(matrix.framework, 'netcoreapp')
      uses: actions/upload-artifact@v2
      with:
        name: crash-sequence.xml
        path: /tmp/TestResults/
        retention-days: 2
    - if: startsWith(matrix.framework, 'net4') && runner.os != 'Windows'
      run: |
        tf="${{ matrix.framework }}"
        v="$XUNIT_VERSION"
        cp -v native/* RandomXSharp.Tests/bin/Debug/$tf/
        cp -v native/* ./
        export LD_LIBRARY_PATH="$(pwd)/RandomXSharp.Tests/bin/Debug/$tf/"
        export DYLD_LIBRARY_PATH="$LD_LIBRARY_PATH"
        mono \
          $HOME/.nuget/packages/xunit.runner.console/$v/tools/$tf/xunit.console.exe \
          RandomXSharp.Tests/bin/Debug/$tf/RandomXSharp.Tests.dll \
          -verbose \
          -junit /tmp/junit.xml
    - if: startsWith(matrix.framework, 'net4') && runner.os == 'Windows'
      run: |
        $tf = "${{ matrix.framework }}"
        $v = "$env:XUNIT_VERSION"
        copy-item native\* RandomXSharp.Tests\bin\Debug\$tf\
        copy-item native\* .\
        & "$env:USERPROFILE\.nuget\packages\xunit.runner.console\$v\tools\$tf\xunit.console.exe" `
          RandomXSharp.Tests\bin\Debug\$tf\RandomXSharp.Tests.dll `
          -verbose `
          -junit /tmp/junit.xml
    - if: always() && startsWith(matrix.framework, 'net4') && runner.os == 'Windows'
      uses: mikepenz/action-junit-report@v2
      with:
        report_paths: /tmp/junit.xml
    - if: github.event_name == 'push' && startsWith(matrix.framework, 'netcoreapp')
      uses: actions/upload-artifact@v2
      with:
        name: native-${{ runner.os }}
        path: |
          native/**/*.dll
          native/**/*.dylib
          native/**/*.so
        if-no-files-found: error
        retention-days: 7

  dist:
    if: github.event_name == 'push'
    needs: build
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
    # Download all native-* artifacts made by the "build" job.
    - uses: actions/download-artifact@v2
      with:
        name: native-Linux
        path: native
    - uses: actions/download-artifact@v2
      with:
        name: native-macOS
        path: native
    - uses: actions/download-artifact@v2
      with:
        name: native-Windows
        path: native
    - uses: actions/cache@v2
      with:
        path: ~/.nuget/packages
        key: nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: nuget-
    - run: |
        if [[ "$GITHUB_REF" = refs/tags/* ]]; then
          dotnet pack -c Release -o dist
        else
          dotnet pack \
            -c Release \
            --version-suffix="dev.$GITHUB_RUN_NUMBER+${GITHUB_SHA:0:7}" \
            -o dist
        fi
    - name: Check if native libraries are correctly placed
      run: |
        set -e
        7z l dist/*.nupkg > /tmp/nupkg-files.txt
        grep runtimes/linux/native/librandomx.so  /tmp/nupkg-files.txt
        grep runtimes/osx/native/librandomx.dylib /tmp/nupkg-files.txt
        grep runtimes/win7-x64/native/randomx.dll /tmp/nupkg-files.txt
    - uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist/*.nupkg
        if-no-files-found: error
    - if: '!github.event.repository.fork'
      run: |
        dotnet nuget push \
          dist/*.nupkg \
          --api-key "${{ secrets.NUGET_API_KEY }}" \
          --source https://api.nuget.org/v3/index.json
